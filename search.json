[
  {
    "objectID": "00_core.html",
    "href": "00_core.html",
    "title": "core",
    "section": "",
    "text": "List of fastcore object to load to use once eccore is imported\nfrom basics: - gen, chunked - NS, SimpleNameSpace - store_attr - getattrs, hasattrs, setattrs - ‘xify’ (listify, tuplify, setify, uniqueify, stringify…) - filter: filter_x, argwhere, - val2idx - patch_to - PrettyString - IPython: ipython_shell, in_ipython, in_colab, in_jupyter, in_notebook\nfrom foundation: - L - Config\nfrom Utility functions: - untar_dir - run - Path with added capabilities\nfrom Meta: - delegates, use_kwargs, funcs_kwargs, method",
    "crumbs": [
      "`core`"
    ]
  },
  {
    "objectID": "00_core.html#path-validation",
    "href": "00_core.html#path-validation",
    "title": "core",
    "section": "Path validation",
    "text": "Path validation\nFunctions to ensure path are properly formated and point to a real file or directory.\n\nsource\n\nvalidate_path\n\n validate_path (path:str|pathlib.Path, path_type:str='file',\n                raise_error:bool=False)\n\nValidate that path is a Path or str and points to a real file or directory\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\npath\nstr | pathlib.Path\n\npath to validate\n\n\npath_type\nstr\nfile\ntype of the target path: 'file', 'dir' or 'any'\n\n\nraise_error\nbool\nFalse\nwhen True, raise a ValueError is path does not a file\n\n\nReturns\nbool\n\nTrue when path is a valid path, False otherwise\n\n\n\n\npath_file = Path('data-dev/jsondict-test.json')\nvalidate_path(path_file)\n\nTrue\n\n\n\nvalidate_path(path_file, path_type='any')\n\nTrue\n\n\n\npath_dir = Path('../data')\nvalidate_path(path_dir, path_type='dir')\n\nTrue\n\n\n\nvalidate_path(path_dir, path_type='any')\n\nTrue\n\n\n\npath_error = Path('../data/img/IIIMG_001_512px.jpg')\nvalidate_path(path_error)\n\nFalse\n\n\n\nsource\n\n\nsafe_path\n\n safe_path (path:str|pathlib.Path)\n\n*Return a Path object when given a valid path as a str or a Path, raise error otherwise\n\nNote: This function does not check whether the file or directory exists.*\n\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\npath\nstr | pathlib.Path\npath to validate\n\n\nReturns\nPath\nvalidated path returned as a pathlib.Path",
    "crumbs": [
      "`core`"
    ]
  },
  {
    "objectID": "01_ipython.html",
    "href": "01_ipython.html",
    "title": "ipython",
    "section": "",
    "text": "System and CLI\n\nsource\n\nrun_cli\n\n run_cli (cmd:str='ls -l')\n\n*Runs a cli command from jupyter notebook and print the shell output message\nUses subprocess.run with passed command to run the cli command*\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ncmd\nstr\nls -l\ncommand to execute in the cli\n\n\n\n\nrun_cli('pwd')\n\n/home/vtec/projects/ec-packages/eccore/nbs-dev\n\n\n\n\n\n\nNotebook setup\nTo be updated using fastcore functions, incl. walk, in_notebook, …\n\nsource\n\nnb_setup\n\n nb_setup (autoreload:bool=True,\n           paths:list[typing.Union[str,pathlib.Path]]=None)\n\n*Use in first cell of notebook to set autoreload, and add system paths\nAlways add a path to the directoruy ‘src’ if srs directory exists at the same level as the nbs directory.\nWhen the notebook is not located in a tree including the name nbs, src directory is searched at the same level as the directory in which the notebook is located.*\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nautoreload\nbool\nTrue\nTrue to set autoreload in this notebook\n\n\npaths\nlist\nNone\nPaths to add to the path environment variable\n\n\n\nBy default, ipython.nb_setup() - loads and set autoreload - adds a path to a directory named src when it exists at the same level as where the notebook directory is located. It no such src directory exists, no path is added\nipython.nb_setup assumes the following file structure:\n    project_directory\n          |--- nbs\n          |     | --- current_nb.ipynb\n          |     | --- ...\n          |\n          |--- src\n          |     | --- module_to_import.py\n          |     | --- ...\n          |\n          |--- data\n          |     |\n          |     | ...\nFor other file structure, specify paths as a list of Path\nBefore running nb_setup, sys.path does not include the path to the local source directory. After running it, it will be added, unless the directory does not exist.\n\nsys.path\n\n['/home/vtec/projects/ec-packages/eccore/nbs-dev',\n '/home/vtec/projects/lewagon/1286-Jul-2023/1_data-challenges/data-context-and-setup',\n '/home/vtec/projects/ec-packages/eccore/nbs-dev',\n '/home/vtec/miniconda3/envs/eccore/lib/python310.zip',\n '/home/vtec/miniconda3/envs/eccore/lib/python3.10',\n '/home/vtec/miniconda3/envs/eccore/lib/python3.10/lib-dynload',\n '',\n '/home/vtec/miniconda3/envs/eccore/lib/python3.10/site-packages',\n '/home/vtec/miniconda3/envs/eccore/lib/python3.10/site-packages/PyQt5_sip-12.11.0-py3.10-linux-x86_64.egg',\n '/home/vtec/projects/ec-packages/eccore']\n\n\n\nnb_setup(autoreload=False)\n\n\nsys.path\n\n['/home/vtec/projects/ec-packages/eccore/nbs-dev',\n '/home/vtec/projects/lewagon/1286-Jul-2023/1_data-challenges/data-context-and-setup',\n '/home/vtec/projects/ec-packages/eccore/nbs-dev',\n '/home/vtec/miniconda3/envs/eccore/lib/python310.zip',\n '/home/vtec/miniconda3/envs/eccore/lib/python3.10',\n '/home/vtec/miniconda3/envs/eccore/lib/python3.10/lib-dynload',\n '',\n '/home/vtec/miniconda3/envs/eccore/lib/python3.10/site-packages',\n '/home/vtec/miniconda3/envs/eccore/lib/python3.10/site-packages/PyQt5_sip-12.11.0-py3.10-linux-x86_64.egg',\n '/home/vtec/projects/ec-packages/eccore']\n\n\nWe also can add other specific paths:\n\npath_to_add = str(Path('../nbs').resolve().absolute())\nnb_setup(autoreload=False, paths=[path_to_add])\n\nAdded path: /home/vtec/projects/ec-packages/eccore/nbs\n\n\n\nsys.path\n\n['/home/vtec/projects/ec-packages/eccore/nbs-dev',\n '/home/vtec/projects/ec-packages/eccore/nbs',\n '/home/vtec/projects/lewagon/1286-Jul-2023/1_data-challenges/data-context-and-setup',\n '/home/vtec/projects/ec-packages/eccore/nbs-dev',\n '/home/vtec/miniconda3/envs/eccore/lib/python310.zip',\n '/home/vtec/miniconda3/envs/eccore/lib/python3.10',\n '/home/vtec/miniconda3/envs/eccore/lib/python3.10/lib-dynload',\n '',\n '/home/vtec/miniconda3/envs/eccore/lib/python3.10/site-packages',\n '/home/vtec/miniconda3/envs/eccore/lib/python3.10/site-packages/PyQt5_sip-12.11.0-py3.10-linux-x86_64.egg',\n '/home/vtec/projects/ec-packages/eccore']\n\n\n\nsource\n\n\ninstall_code_on_cloud\n\n install_code_on_cloud (package_name:str, quiet:bool=False)\n\npip install the project code package, when nb is running in the cloud.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\npackage_name\nstr\n\nproject package name, e.g. metagentools or git+https://github.com/repo.git@main\n\n\nquiet\nbool\nFalse\ninstall quietly with Trud\n\n\n\nWhen using colab, kaggle or another cloud VM, specicif code must be installed every time from the Python Package Index (PyPI) or its GitHub repo.\nWhen running locally, the project code should be pre-installed as part of the environment\n\ninstall_code_on_cloud(package_name='metagentools');\n\nThe notebook is running locally, will not automatically install project code\n\n\n\n\n\nImprove output cell formats\n\nsource\n\ndisplay_mds\n\n display_mds (*strings:str|tuple[str])\n\nDisplay one or several strings formatted in markdown format\n\ndisplay_mds('**bold** and _italic_')\n\nbold and italic\n\n\n\ndisplay_mds('**bold** and _italic_',\n            '- bullet',\n            '- bullet',\n            '&gt; Note: this is a note'\n)\n\nbold and italic\n\n\n\nbullet\n\n\n\n\nbullet\n\n\n\n\nNote: this is a note\n\n\n\n\nsource\n\n\ndisplay_dfs\n\n display_dfs (*dfs:pandas.core.frame.DataFrame)\n\nDisplay one or several pd.DataFrame in a single cell output\n\ndf1 = pd.DataFrame(data=np.random.normal(size=(10,5)))\ndf2 = pd.DataFrame(data=np.random.normal(size=(20,10)))\n\ndisplay_dfs(df1.head(3), df2.head(3))\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n\n\n\n\n0\n1.181754\n0.615892\n-1.186460\n-0.294719\n-0.495170\n\n\n1\n-0.493491\n0.380444\n0.782281\n-0.105894\n-1.223624\n\n\n2\n-0.311006\n1.246225\n0.046744\n0.050204\n-1.087755\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n\n0\n-0.939571\n0.394111\n-0.140105\n0.125774\n-1.155984\n0.285345\n-1.539391\n1.678055\n-1.670574\n-1.002644\n\n\n1\n0.301599\n-0.462982\n-0.559338\n-0.726182\n-0.711528\n-0.984906\n-0.607021\n0.007495\n-0.791158\n-0.136291\n\n\n2\n-1.613467\n0.405388\n-0.600787\n-0.291880\n-1.579870\n0.064600\n1.236128\n-0.128559\n0.131884\n0.173675\n\n\n\n\n\n\n\n\nsource\n\n\npandas_nrows_ncols\n\n pandas_nrows_ncols (nrows:int|None=None, ncols:int|None=None)\n\nContext manager that sets the max number of rows and cols to apply to any output within the context\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nnrows\nint | None\nNone\nmax number of rows to show; show all rows if None\n\n\nncols\nint | None\nNone\nmax number of columns to show; show all columns if None\n\n\n\nWith no context manager, the pandas object are displayed with a maximum of 60 rows and 20 columns.\n\ndf = pd.DataFrame(np.random.randint(low=0, high=100, size=(3,50)))\ndisplay(df)\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n...\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n\n\n\n\n0\n35\n70\n23\n27\n0\n1\n23\n55\n80\n30\n...\n39\n39\n83\n19\n51\n49\n23\n26\n41\n38\n\n\n1\n74\n78\n0\n16\n18\n37\n18\n21\n27\n45\n...\n19\n50\n29\n65\n87\n16\n5\n39\n79\n13\n\n\n2\n64\n71\n83\n74\n54\n75\n80\n6\n2\n2\n...\n87\n41\n91\n46\n79\n37\n6\n94\n81\n77\n\n\n\n\n3 rows × 50 columns\n\n\n\nUsing the context manager, all rows and columns will be displayed\n\nwith pandas_nrows_ncols():\n    display(df)\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n\n\n\n\n0\n35\n70\n23\n27\n0\n1\n23\n55\n80\n30\n78\n12\n69\n89\n44\n57\n30\n0\n16\n49\n29\n2\n14\n51\n48\n61\n85\n19\n71\n87\n30\n94\n27\n59\n57\n29\n88\n71\n41\n0\n39\n39\n83\n19\n51\n49\n23\n26\n41\n38\n\n\n1\n74\n78\n0\n16\n18\n37\n18\n21\n27\n45\n80\n6\n71\n38\n5\n7\n76\n19\n71\n35\n8\n36\n98\n69\n64\n42\n34\n1\n39\n53\n42\n27\n22\n47\n88\n81\n26\n94\n44\n86\n19\n50\n29\n65\n87\n16\n5\n39\n79\n13\n\n\n2\n64\n71\n83\n74\n54\n75\n80\n6\n2\n2\n6\n61\n8\n22\n64\n45\n57\n67\n23\n62\n96\n10\n61\n63\n92\n8\n39\n26\n53\n79\n5\n98\n41\n16\n99\n89\n14\n41\n9\n0\n87\n41\n91\n46\n79\n37\n6\n94\n81\n77\n\n\n\n\n\n\n\nIt is also possible to specifically define the number of rows and columns to display\n\nwith pandas_nrows_ncols(nrows=2, ncols=6):\n    display(df)\n\n\n\n\n\n\n\n\n0\n1\n2\n...\n47\n48\n49\n\n\n\n\n0\n35\n70\n23\n...\n26\n41\n38\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n2\n64\n71\n83\n...\n94\n81\n77\n\n\n\n\n3 rows × 50 columns\n\n\n\n\nwith pandas_nrows_ncols(2,6):\n    print(df)\n\n    0   1   2   ...  47  48  49\n0   35  70  23  ...  26  41  38\n..  ..  ..  ..  ...  ..  ..  ..\n2   64  71  83  ...  94  81  77\n\n[3 rows x 50 columns]\n\n\n\nTechnical background\nthe context manager uses pandas’s options API\n\n\npd.options.display.max_rows, pd.options.display.max_columns\n\n(60, 20)\n\n\n\npd.get_option('display.max_rows'), pd.get_option('display.max_columns')\n\n(60, 20)\n\n\n\npd.describe_option('display.max_rows')\n\ndisplay.max_rows : int\n    If max_rows is exceeded, switch to truncate view. Depending on\n    `large_repr`, objects are either centrally truncated or printed as\n    a summary view. 'None' value means unlimited.\n\n    In case python/IPython is running in a terminal and `large_repr`\n    equals 'truncate' this can be set to 0 and pandas will auto-detect\n    the height of the terminal and print a truncated object which fits\n    the screen height. The IPython notebook, IPython qtconsole, or\n    IDLE do not run in a terminal and hence it is not possible to do\n    correct auto-detection.\n    [default: 60] [currently: 60]\n\n\n\npd.options.display.max_rows = 10\npd.reset_option('display.max_rows')\npd.options.display.max_rows\n\n60\n\n\n\nsource\n\n\ndisplay_full_df\n\n display_full_df\n                  (df:pandas.core.frame.DataFrame|pandas.core.series.Serie\n                  s)\n\nDisplay a pandas DataFrame or Series showing all rows and columns\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ndf\npandas.core.frame.DataFrame | pandas.core.series.Series\nDataFrame or Series to display\n\n\n\n\ndf = pd.DataFrame(np.random.randint(low=0, high=100, size=(3,50)))\ndf\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n...\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n\n\n\n\n0\n61\n70\n53\n42\n29\n48\n99\n7\n22\n12\n...\n9\n21\n81\n91\n3\n72\n92\n44\n47\n41\n\n\n1\n6\n27\n8\n89\n14\n66\n58\n37\n57\n19\n...\n40\n42\n23\n10\n38\n83\n0\n5\n74\n44\n\n\n2\n91\n1\n65\n57\n5\n23\n90\n33\n15\n64\n...\n36\n79\n62\n97\n72\n44\n0\n67\n63\n85\n\n\n\n\n3 rows × 50 columns\n\n\n\n\ndisplay_full_df(df)\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n\n\n\n\n0\n61\n70\n53\n42\n29\n48\n99\n7\n22\n12\n24\n42\n67\n81\n49\n63\n39\n89\n13\n76\n7\n63\n2\n69\n95\n47\n40\n37\n56\n73\n56\n19\n48\n52\n12\n39\n75\n48\n1\n50\n9\n21\n81\n91\n3\n72\n92\n44\n47\n41\n\n\n1\n6\n27\n8\n89\n14\n66\n58\n37\n57\n19\n16\n31\n55\n45\n11\n81\n27\n6\n49\n87\n62\n29\n26\n59\n80\n45\n8\n4\n57\n25\n61\n86\n4\n10\n80\n52\n32\n65\n87\n4\n40\n42\n23\n10\n38\n83\n0\n5\n74\n44\n\n\n2\n91\n1\n65\n57\n5\n23\n90\n33\n15\n64\n31\n53\n39\n4\n17\n48\n31\n13\n92\n42\n28\n85\n61\n47\n53\n29\n27\n95\n13\n2\n89\n92\n8\n30\n42\n83\n13\n22\n1\n84\n36\n79\n62\n97\n72\n44\n0\n67\n63\n85\n\n\n\n\n\n\n\n\nmsg = 'should raise a TypeError'\ncontains = 'df must me a pandas `DataFrame` or `Series`'\n\ntest_fail(display_full_df, args=['a string'], msg=msg, contains=contains)",
    "crumbs": [
      "`ipython`"
    ]
  },
  {
    "objectID": "02_plotting.html",
    "href": "02_plotting.html",
    "title": "plotting",
    "section": "",
    "text": "Work with color maps\n\nmatplotlib.colormaps['Dark2']\n\nDark2  underbad over \n\n\n\nsource\n\nplot_cmap_collections\n\n plot_cmap_collections (cmap_collections:str|list[str]=None)\n\nPlot all color maps in the collections passed as cmap_collections\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ncmap_collections\nstr | list[str]\nNone\nlist of color map collections to display (from cmaps.keys())\n\n\n\nThe following color map collections are defined:\n\n\n- Cyclic\n- Diverging\n- Miscellaneous\n- Perceptually Uniform Sequential\n- Qualitative\n- Sequential\n- Sequential (2)\n\n\nplot_cmap_collections will plot a color bar for each color map in the selected collections:\n\nA single collection\n\n\nplot_cmap_collections('Cyclic')\n\n\n\n\n\n\n\n\n\nSeveral collections\n\n\nplot_cmap_collections(['Qualitative', 'Sequential'])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAll the collections\n\n\nplot_cmap_collections()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsource\n\n\nplot_color_bar\n\n plot_color_bar (cmap:str, series:list[typing.Union[int,float]]=None)\n\nPlot a color bar with value overlay from series based on cmap\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ncmap\nstr\n\nstring name of one of the cmaps\n\n\nseries\nlist\nNone\nseries of numerical values to show for each color\n\n\n\n\nplot_color_bar('tab10', range(10))\n\n\n\n\n\n\n\n\n\nplot_color_bar('tab10', series=range(6))\n\n\n\n\n\n\n\n\n\nplot_color_bar('tab10', series=[0, 1, 2])\n\n\n\n\n\n\n\n\n\nsource\n\n\nget_color_mapper\n\n get_color_mapper (series:list[typing.Union[int,float]], cmap:str='tab10')\n\nReturn color mapper based on a color map and a series of values\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nseries\nlist\n\nseries of values to map to colors\n\n\ncmap\nstr\ntab10\nname of the cmap to use\n\n\n\n\nUsage\nThis function is used to ensure coherent colors for different plots.\n\nDefine a color mapper based on values and cmap: clr_mapper = get_color_mapper([1, 2, 3, 4], cmap='Paired)\nCall the color mapper and have it return the appropriate values for any plot: clr_mapper.to_rgba(2)\n\n\nExample\nLet’s take a dataset \\((X,y)\\), generated by sklearn using make_blob for 5,000 samples with 6 features each and grouped in 10 centers. The \\(X\\) and \\(y\\) are saved as npy file\n\nimport pandas as pd\nwith open('data-dev/ten-blobs-6-cols-X.npy', 'rb') as fp:\n    X = np.load(fp)\nwith open('data-dev/ten-blobs-6-cols-y.npy', 'rb') as fp:\n    y = np.load(fp)\n    \nn_feats = X.shape[1]\ncol_list = [f\"col_{i}\" for i in range(n_feats)]\n\nX = pd.DataFrame(X, columns=col_list)\nX.head(3)\n\n\n\n\n\n\n\n\ncol_0\ncol_1\ncol_2\ncol_3\ncol_4\ncol_5\n\n\n\n\n0\n8.714921\n0.580067\n6.817529\n-4.891837\n-0.418419\n-4.127050\n\n\n1\n-0.322263\n-3.901781\n-8.588875\n1.114151\n4.908420\n-2.475176\n\n\n2\n-7.798702\n-4.276232\n-1.145314\n-6.619232\n-9.232606\n6.994045\n\n\n\n\n\n\n\n\n\n1. Define a color mapper based on values and cmap\nWe have clustered the 5,000 sample of \\(X\\) into 10 clusters (saved into a clusters.npy file)\nNow we want to make a scatter plot of two of the features, displaying the 10 cluster using a cmap.\nTo ensure that we can keep the same cluster color mapping for other plots, we use clr_mapper to predefine how colors are mapped to each cluster:\n\nclr_mapper = get_color_mapper(cluster_ids, cmap=cmap).\n\n\n# Load clustered data from the blobs\nwith open('data-dev/ten-blobs-6-cols-clusters.npy', 'rb') as fp:\n    clusters = np.load(fp)\n    \ncluster_ids = np.unique(clusters)\ncluster_ids\n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], dtype=int32)\n\n\n\ncmap='tab10'\n\nfig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=(14, 3))\n\nim1 = ax1.scatter(X.col_0, X.col_1, c=clusters, s=2, cmap=cmap)\nax1.set_title('2 first features, colored by cluster value')\nfig.colorbar(im1)\n\nim2 = ax2.scatter(X.col_4, X.col_5, c=clusters, s=2, cmap=cmap)\nax2.set_title('2 last features, colored by cluster value')\nfig.colorbar(im2)\nplt.show()\n\n\n\n\n\n\n\n\n\nclr_mapper = get_color_mapper(cluster_ids, cmap=cmap)\n\n\n\nCall the color mapper and use it in any plot\nUse for another plot, showing another feature, and its value for each sample, colored according to its cluster\n\nfeatname = 'col_4'\nplt.figure(figsize=(12, 3))\nplt.plot(X[featname], c='grey', alpha=.66, lw=0.25)\nplt.title(f'{featname}.')\nplt.show()\n\nplt.figure(figsize=(12, 3))\nplt.plot(X[featname], c='grey', alpha=.5, lw=0.1)\nfor c in cluster_ids:\n    mask = y == c\n    X[f\"{featname}_{c}\"] = X.loc[:, featname]\n    X.loc[~mask, f\"{featname}_{c}\"] = np.nan\n    plt.plot(X[f\"{featname}_{c}\"], label=str(c), c=clr_mapper.to_rgba(c), lw=0, marker='o', markersize=1)\nplt.title(f'{featname}. Data points colored according to the cluster it belongs to.')\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdvanced plots\n\nsource\n\nplot_feature_scatter\n\n plot_feature_scatter (X:numpy.ndarray, y:Optional[numpy.ndarray]=None,\n                       n_plots:int=2, axes_per_row:int=3, axes_size:int=5)\n\nPlots n_plots scatter plots of randomly selected combinations of two features out of X\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nX\nndarray\n\ninput dataset. X.shape[1] is used to set the total number of features\n\n\ny\nOptional\nNone\ntarget dataset\n\n\nn_plots\nint\n2\nnumber of feature pairs scatter plot to show\n\n\naxes_per_row\nint\n3\nnumber of axes per row. number of rows will be calculated accordingly\n\n\naxes_size\nint\n5\nsize of one axes. figsize will be (ncols * axes_size, nrows * axes_size)\n\n\n\n\nX.shape\n\n(5000, 16)\n\n\n\nwith open('data-dev/ten-blobs-6-cols-X.npy', 'rb') as fp:\n    X = np.load(fp)\nwith open('data-dev/ten-blobs-6-cols-y.npy', 'rb') as fp:\n    y = np.load(fp)\n\nn_feats = X.shape[1]\ncol_list = [f\"col_{i}\" for i in range(n_feats)]\nX = pd.DataFrame(X, columns=col_list)\n\nplot_feature_scatter(X.values, y, n_plots=6, axes_per_row=3, axes_size=5)\n\n\n\n\n\n\n\n\nWhen not value is available for y, it is set to 1 by default\n\nplot_feature_scatter(X.values, n_plots=4, axes_per_row=2, axes_size=2)",
    "crumbs": [
      "`plotting`"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "eccore",
    "section": "",
    "text": "PyPi\npip install eccore\nGitHub\nTwo options to get versions which are not yet released on PyPi:\n\nclone the github repo and install it in edit mode from within the cloned repo:\n\npip install -e .\n\ninstall with pip from the github repo directly for hosted virtual machines:\n\npip install git+https://github.com/vtecftwy/eccore.git@main\npip install git+https://github.com/vtecftwy/eccore.git@dev",
    "crumbs": [
      "`eccore`"
    ]
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "eccore",
    "section": "",
    "text": "PyPi\npip install eccore\nGitHub\nTwo options to get versions which are not yet released on PyPi:\n\nclone the github repo and install it in edit mode from within the cloned repo:\n\npip install -e .\n\ninstall with pip from the github repo directly for hosted virtual machines:\n\npip install git+https://github.com/vtecftwy/eccore.git@main\npip install git+https://github.com/vtecftwy/eccore.git@dev",
    "crumbs": [
      "`eccore`"
    ]
  },
  {
    "objectID": "index.html#modules",
    "href": "index.html#modules",
    "title": "eccore",
    "section": "Modules:",
    "text": "Modules:\nWIP",
    "crumbs": [
      "`eccore`"
    ]
  },
  {
    "objectID": "01_dev_utils.html",
    "href": "01_dev_utils.html",
    "title": "dev_utils",
    "section": "",
    "text": "Classes and decorators to work with sys.settrace(tracefunc)\n\n\ntracefunc(the trace function) should have three arguments: frame, event, and arg:\n\nframe is the current stack frame.\nevent is a string: 'call', 'line', 'return', 'exception' or 'opcode'.\narg depends on the event type.\n\nframe has many attributes, including those below which are used in the tracing classes below:\n\n\n\n\n\n\n\n\nType\nAttribute\nDescription\n\n\n\n\nframe\nf_back\nnext outer frame object (this frame’s caller)\n\n\n\nf_code\ncode object being executed in this frame\n\n\n\nf_lineno\ncurrent line number in Python source code\n\n\ncode\nco_code\nstring of raw compiled bytecode\n\n\n\nco_filename\nname of file in which this code object was created\n\n\n\nco_name\nname with which this code object was defined\n\n\n\nco_names\ntuple of names other than arguments and function locals\n\n\n\nco_stacksize\nvirtual machine stack space required\n\n\n\nco_varnames\ntuple of names of arguments and local variables\n\n\n\nSee full documentation in sys and inspect built-in modules.\nExperiments with frame and its attributes\n\ndef fn(a):\n    return a + 1\n\nb = fn(1)\n\nframes = sys._current_frames()\n\n\nframesids = list(frames.keys())\n\nfor id in framesids:\n    fr = frames[id]\n    print(f\"{fr.f_lineno:5d}   {fr.f_code.co_name:20s}   {fr.f_code.co_filename:50s}\")\n\n  330   wait                   /home/vtec/miniconda3/envs/eccore/lib/python3.10/threading.py\n  482   select                 /home/vtec/miniconda3/envs/eccore/lib/python3.10/selectors.py\n  327   _watch_pipe_fd         /home/vtec/miniconda3/envs/eccore/lib/python3.10/site-packages/ipykernel/iostream.py\n  327   _watch_pipe_fd         /home/vtec/miniconda3/envs/eccore/lib/python3.10/site-packages/ipykernel/iostream.py\n  103   run                    /home/vtec/miniconda3/envs/eccore/lib/python3.10/site-packages/ipykernel/heartbeat.py\n  482   select                 /home/vtec/miniconda3/envs/eccore/lib/python3.10/selectors.py\n    6   &lt;cell line: 6&gt;         /tmp/ipykernel_13671/1808055364.py                \n\n\n\nframe = frames[framesids[-1]]\n\nprint(frame.f_code.co_names)\nprint(frame.f_code.co_stacksize)\nprint(frame.f_code.co_varnames)\n\nprint(inspect.getsource(frame))\n\n('sys', '_current_frames', 'frames')\n2\n()\ndef fn(a):\n    return a + 1\n\n\n\n\n\n\n\nsource\n\n\n\n StackTrace (with_call:bool=True, with_return:bool=True,\n             with_exception:bool=True, max_depth:int=-1)\n\nCallable class acting as tracefunc to capture and print information on all stack frame being run\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nwith_call\nbool\nTrue\nwhen True, call events are traced\n\n\nwith_return\nbool\nTrue\nwhen True, return events are traced\n\n\nwith_exception\nbool\nTrue\nwhen True, exceptions events are traced\n\n\nmax_depth\nint\n-1\nmaximum depth of the trace, default is full depth\n\n\n\n\nsource\n\n\n\n\n StackTrace.__call__ (frame:inspect.FrameInfo, event:str, arg:Any)\n\ntracefuncused in sys.settrace(tracefunc)\n\n\n\n\nType\nDetails\n\n\n\n\nframe\nFrameInfo\nframe argument in tracefunc\n\n\nevent\nstr\nevent argument in tracefunc\n\n\narg\nAny\narg argument in tracefunc\n\n\n\n\nsource\n\n\n\n\n StackTrace.print_stack_info (co_filename:str|pathlib.Path, ret:bool,\n                              depth:int)\n\nThis methods can be overloaded to customize what is printed out\n\n\n\n\nType\nDetails\n\n\n\n\nco_filename\nstr | pathlib.Path\ncode file name\n\n\nret\nbool\n\n\n\ndepth\nint\ndepth\n\n\n\n\nsource\n\n\n\n\n StackTraceJupyter (with_call:bool=True, with_return:bool=True,\n                    with_exception:bool=True, max_depth:int=-1)\n\nPrint stack frame information in Jupyter notebook context (filters out jupyter overhead)\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nwith_call\nbool\nTrue\nwhen True, call events are traced\n\n\nwith_return\nbool\nTrue\nwhen True, return events are traced\n\n\nwith_exception\nbool\nTrue\nwhen True, exceptions events are traced\n\n\nmax_depth\nint\n-1\nmaximum depth of the trace, default is full depth\n\n\n\n\n\n\n\n\nsource\n\n\n\n stack_trace (**kw)\n\nstack_trace decorator function\n\nsource\n\n\n\n\n stack_trace_jupyter (**kw)\n\nstack_trace_jupyter decorator function\n\n\nSeveral functions, some of them nested and some of them with errors.\n\ndef empty_func():\n        pass\n\ndef call_empty_and_return_zero():\n    empty_func()\n    return 0\n\ndef divide_by_zero_error():\n    1/0\n\ndef decrement_recursion(i):\n    if i == 0:\n        return\n    decrement_recursion(i-1)\n\nUsing the @stack_trace or @stack_trace_jupyter decorator allows a detailled trace, function by function and identify where it fails.\n\n@stack_trace(with_return=True, with_exception=True, max_depth=10)\ndef function_to_trace():\n    call_empty_and_return_zero()\n    decrement_recursion(5)\n    divide_by_zero_error()\n\n\ntest_fail(\n    function_to_trace,\n    msg='Should raise a div by 0 exception',\n    contains='division by zero'\n)\n\nfunction_to_trace   [call]  in /tmp/ipykernel_13671/661382525.py line:1\n  call_empty_and_return_zero    [call]  in /tmp/ipykernel_13671/2653264264.py line:4\n    empty_func  [call]  in /tmp/ipykernel_13671/2653264264.py line:1\n    empty_func  [return]    None    in /tmp/ipykernel_13671/2653264264.py line:2\n  call_empty_and_return_zero    [return]    0   in /tmp/ipykernel_13671/2653264264.py line:6\n  decrement_recursion   [call]  in /tmp/ipykernel_13671/2653264264.py line:11\n    decrement_recursion [call]  in /tmp/ipykernel_13671/2653264264.py line:11\n      decrement_recursion   [call]  in /tmp/ipykernel_13671/2653264264.py line:11\n        decrement_recursion [call]  in /tmp/ipykernel_13671/2653264264.py line:11\n          decrement_recursion   [call]  in /tmp/ipykernel_13671/2653264264.py line:11\n            decrement_recursion [call]  in /tmp/ipykernel_13671/2653264264.py line:11\n            decrement_recursion [return]    None    in /tmp/ipykernel_13671/2653264264.py line:13\n          decrement_recursion   [return]    None    in /tmp/ipykernel_13671/2653264264.py line:14\n        decrement_recursion [return]    None    in /tmp/ipykernel_13671/2653264264.py line:14\n      decrement_recursion   [return]    None    in /tmp/ipykernel_13671/2653264264.py line:14\n    decrement_recursion [return]    None    in /tmp/ipykernel_13671/2653264264.py line:14\n  decrement_recursion   [return]    None    in /tmp/ipykernel_13671/2653264264.py line:14\n  divide_by_zero_error  [call]  in /tmp/ipykernel_13671/2653264264.py line:8\n  divide_by_zero_error  [exception] &lt;class 'ZeroDivisionError'&gt; in /tmp/ipykernel_13671/2653264264.py line:9\n  divide_by_zero_error  [return]    None    in /tmp/ipykernel_13671/2653264264.py line:9\nfunction_to_trace   [exception] &lt;class 'ZeroDivisionError'&gt; in /tmp/ipykernel_13671/661382525.py line:5\nfunction_to_trace   [return]    None    in /tmp/ipykernel_13671/661382525.py line:5\n\n\n\n@stack_trace_jupyter(with_return=True, with_exception=True, max_depth=15)\ndef function_to_trace_jupyter():\n    call_empty_and_return_zero()\n    decrement_recursion(5)\n    divide_by_zero_error()\n\n\ntest_fail(\n    function_to_trace_jupyter,\n    msg='Should raise a div by 0 exception',\n    contains='division by zero'\n)\n\nfunction_to_trace_jupyter   [call]  in /tmp/ipykernel_13671/2571630784.py line:1\n  call_empty_and_return_zero    [call]  in /tmp/ipykernel_13671/2653264264.py line:4\n    empty_func  [call]  in /tmp/ipykernel_13671/2653264264.py line:1\n    empty_func  [return]    None    in /tmp/ipykernel_13671/2653264264.py line:2\n  call_empty_and_return_zero    [return]    0   in /tmp/ipykernel_13671/2653264264.py line:6\n  decrement_recursion   [call]  in /tmp/ipykernel_13671/2653264264.py line:11\n    decrement_recursion [call]  in /tmp/ipykernel_13671/2653264264.py line:11\n      decrement_recursion   [call]  in /tmp/ipykernel_13671/2653264264.py line:11\n        decrement_recursion [call]  in /tmp/ipykernel_13671/2653264264.py line:11\n          decrement_recursion   [call]  in /tmp/ipykernel_13671/2653264264.py line:11\n            decrement_recursion [call]  in /tmp/ipykernel_13671/2653264264.py line:11\n            decrement_recursion [return]    None    in /tmp/ipykernel_13671/2653264264.py line:13\n          decrement_recursion   [return]    None    in /tmp/ipykernel_13671/2653264264.py line:14\n        decrement_recursion [return]    None    in /tmp/ipykernel_13671/2653264264.py line:14\n      decrement_recursion   [return]    None    in /tmp/ipykernel_13671/2653264264.py line:14\n    decrement_recursion [return]    None    in /tmp/ipykernel_13671/2653264264.py line:14\n  decrement_recursion   [return]    None    in /tmp/ipykernel_13671/2653264264.py line:14\n  divide_by_zero_error  [call]  in /tmp/ipykernel_13671/2653264264.py line:8\n  divide_by_zero_error  [exception] &lt;class 'ZeroDivisionError'&gt; in /tmp/ipykernel_13671/2653264264.py line:9\n  divide_by_zero_error  [return]    None    in /tmp/ipykernel_13671/2653264264.py line:9\nfunction_to_trace_jupyter   [exception] &lt;class 'ZeroDivisionError'&gt; in /tmp/ipykernel_13671/2571630784.py line:5\nfunction_to_trace_jupyter   [return]    None    in /tmp/ipykernel_13671/2571630784.py line:5",
    "crumbs": [
      "`dev_utils`"
    ]
  },
  {
    "objectID": "01_dev_utils.html#tracing-classes",
    "href": "01_dev_utils.html#tracing-classes",
    "title": "dev_utils",
    "section": "",
    "text": "source\n\n\n\n StackTrace (with_call:bool=True, with_return:bool=True,\n             with_exception:bool=True, max_depth:int=-1)\n\nCallable class acting as tracefunc to capture and print information on all stack frame being run\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nwith_call\nbool\nTrue\nwhen True, call events are traced\n\n\nwith_return\nbool\nTrue\nwhen True, return events are traced\n\n\nwith_exception\nbool\nTrue\nwhen True, exceptions events are traced\n\n\nmax_depth\nint\n-1\nmaximum depth of the trace, default is full depth\n\n\n\n\nsource\n\n\n\n\n StackTrace.__call__ (frame:inspect.FrameInfo, event:str, arg:Any)\n\ntracefuncused in sys.settrace(tracefunc)\n\n\n\n\nType\nDetails\n\n\n\n\nframe\nFrameInfo\nframe argument in tracefunc\n\n\nevent\nstr\nevent argument in tracefunc\n\n\narg\nAny\narg argument in tracefunc\n\n\n\n\nsource\n\n\n\n\n StackTrace.print_stack_info (co_filename:str|pathlib.Path, ret:bool,\n                              depth:int)\n\nThis methods can be overloaded to customize what is printed out\n\n\n\n\nType\nDetails\n\n\n\n\nco_filename\nstr | pathlib.Path\ncode file name\n\n\nret\nbool\n\n\n\ndepth\nint\ndepth\n\n\n\n\nsource\n\n\n\n\n StackTraceJupyter (with_call:bool=True, with_return:bool=True,\n                    with_exception:bool=True, max_depth:int=-1)\n\nPrint stack frame information in Jupyter notebook context (filters out jupyter overhead)\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nwith_call\nbool\nTrue\nwhen True, call events are traced\n\n\nwith_return\nbool\nTrue\nwhen True, return events are traced\n\n\nwith_exception\nbool\nTrue\nwhen True, exceptions events are traced\n\n\nmax_depth\nint\n-1\nmaximum depth of the trace, default is full depth",
    "crumbs": [
      "`dev_utils`"
    ]
  },
  {
    "objectID": "01_dev_utils.html#tracing-decorators",
    "href": "01_dev_utils.html#tracing-decorators",
    "title": "dev_utils",
    "section": "",
    "text": "source\n\n\n\n stack_trace (**kw)\n\nstack_trace decorator function\n\nsource\n\n\n\n\n stack_trace_jupyter (**kw)\n\nstack_trace_jupyter decorator function\n\n\nSeveral functions, some of them nested and some of them with errors.\n\ndef empty_func():\n        pass\n\ndef call_empty_and_return_zero():\n    empty_func()\n    return 0\n\ndef divide_by_zero_error():\n    1/0\n\ndef decrement_recursion(i):\n    if i == 0:\n        return\n    decrement_recursion(i-1)\n\nUsing the @stack_trace or @stack_trace_jupyter decorator allows a detailled trace, function by function and identify where it fails.\n\n@stack_trace(with_return=True, with_exception=True, max_depth=10)\ndef function_to_trace():\n    call_empty_and_return_zero()\n    decrement_recursion(5)\n    divide_by_zero_error()\n\n\ntest_fail(\n    function_to_trace,\n    msg='Should raise a div by 0 exception',\n    contains='division by zero'\n)\n\nfunction_to_trace   [call]  in /tmp/ipykernel_13671/661382525.py line:1\n  call_empty_and_return_zero    [call]  in /tmp/ipykernel_13671/2653264264.py line:4\n    empty_func  [call]  in /tmp/ipykernel_13671/2653264264.py line:1\n    empty_func  [return]    None    in /tmp/ipykernel_13671/2653264264.py line:2\n  call_empty_and_return_zero    [return]    0   in /tmp/ipykernel_13671/2653264264.py line:6\n  decrement_recursion   [call]  in /tmp/ipykernel_13671/2653264264.py line:11\n    decrement_recursion [call]  in /tmp/ipykernel_13671/2653264264.py line:11\n      decrement_recursion   [call]  in /tmp/ipykernel_13671/2653264264.py line:11\n        decrement_recursion [call]  in /tmp/ipykernel_13671/2653264264.py line:11\n          decrement_recursion   [call]  in /tmp/ipykernel_13671/2653264264.py line:11\n            decrement_recursion [call]  in /tmp/ipykernel_13671/2653264264.py line:11\n            decrement_recursion [return]    None    in /tmp/ipykernel_13671/2653264264.py line:13\n          decrement_recursion   [return]    None    in /tmp/ipykernel_13671/2653264264.py line:14\n        decrement_recursion [return]    None    in /tmp/ipykernel_13671/2653264264.py line:14\n      decrement_recursion   [return]    None    in /tmp/ipykernel_13671/2653264264.py line:14\n    decrement_recursion [return]    None    in /tmp/ipykernel_13671/2653264264.py line:14\n  decrement_recursion   [return]    None    in /tmp/ipykernel_13671/2653264264.py line:14\n  divide_by_zero_error  [call]  in /tmp/ipykernel_13671/2653264264.py line:8\n  divide_by_zero_error  [exception] &lt;class 'ZeroDivisionError'&gt; in /tmp/ipykernel_13671/2653264264.py line:9\n  divide_by_zero_error  [return]    None    in /tmp/ipykernel_13671/2653264264.py line:9\nfunction_to_trace   [exception] &lt;class 'ZeroDivisionError'&gt; in /tmp/ipykernel_13671/661382525.py line:5\nfunction_to_trace   [return]    None    in /tmp/ipykernel_13671/661382525.py line:5\n\n\n\n@stack_trace_jupyter(with_return=True, with_exception=True, max_depth=15)\ndef function_to_trace_jupyter():\n    call_empty_and_return_zero()\n    decrement_recursion(5)\n    divide_by_zero_error()\n\n\ntest_fail(\n    function_to_trace_jupyter,\n    msg='Should raise a div by 0 exception',\n    contains='division by zero'\n)\n\nfunction_to_trace_jupyter   [call]  in /tmp/ipykernel_13671/2571630784.py line:1\n  call_empty_and_return_zero    [call]  in /tmp/ipykernel_13671/2653264264.py line:4\n    empty_func  [call]  in /tmp/ipykernel_13671/2653264264.py line:1\n    empty_func  [return]    None    in /tmp/ipykernel_13671/2653264264.py line:2\n  call_empty_and_return_zero    [return]    0   in /tmp/ipykernel_13671/2653264264.py line:6\n  decrement_recursion   [call]  in /tmp/ipykernel_13671/2653264264.py line:11\n    decrement_recursion [call]  in /tmp/ipykernel_13671/2653264264.py line:11\n      decrement_recursion   [call]  in /tmp/ipykernel_13671/2653264264.py line:11\n        decrement_recursion [call]  in /tmp/ipykernel_13671/2653264264.py line:11\n          decrement_recursion   [call]  in /tmp/ipykernel_13671/2653264264.py line:11\n            decrement_recursion [call]  in /tmp/ipykernel_13671/2653264264.py line:11\n            decrement_recursion [return]    None    in /tmp/ipykernel_13671/2653264264.py line:13\n          decrement_recursion   [return]    None    in /tmp/ipykernel_13671/2653264264.py line:14\n        decrement_recursion [return]    None    in /tmp/ipykernel_13671/2653264264.py line:14\n      decrement_recursion   [return]    None    in /tmp/ipykernel_13671/2653264264.py line:14\n    decrement_recursion [return]    None    in /tmp/ipykernel_13671/2653264264.py line:14\n  decrement_recursion   [return]    None    in /tmp/ipykernel_13671/2653264264.py line:14\n  divide_by_zero_error  [call]  in /tmp/ipykernel_13671/2653264264.py line:8\n  divide_by_zero_error  [exception] &lt;class 'ZeroDivisionError'&gt; in /tmp/ipykernel_13671/2653264264.py line:9\n  divide_by_zero_error  [return]    None    in /tmp/ipykernel_13671/2653264264.py line:9\nfunction_to_trace_jupyter   [exception] &lt;class 'ZeroDivisionError'&gt; in /tmp/ipykernel_13671/2571630784.py line:5\nfunction_to_trace_jupyter   [return]    None    in /tmp/ipykernel_13671/2571630784.py line:5",
    "crumbs": [
      "`dev_utils`"
    ]
  }
]